
  ZYNQ zc702/zc706 setup for Poky-Debian
  2013 (c) Daniel Sangorrin <daniel.sangorrin@toshiba.co.jp>
  
1) Prepare SD Card
   ===============

Ref: http://www.wiki.xilinx.com/Prepare+Boot+Medium

# mount (check SDCard dev. e.g. /dev/sdb)
# umount /media/xxx (unmont SDCard if mounted)
# dd if=/dev/zero of=/dev/sdb bs=1024 count=1 (erase first sector)
# cfdisk /dev/sdb
  + /dev/sdb1: 200MB | W95 Fat32 (LBA) (code c) | bootable
  + /dev/sdb2: Rest | Linux (code t)
# mkfs.vfat -F 32 -n boot /dev/sdb1
# mkfs.ext2 -L root /dev/sdb2

2) Run with prebuilt binaries
   ==========================

Next, we will install the binaries generated by poky-debian. Make sure 
that both partitions are *mounted* (e.g.: re-insert the SDCard).

# cd /media/root/
# tar zxvfp /path/to/rootfs.tar.gz (root filesystem)
# tar zxvfp /path/to/modules.tgz (kernel modules)
# cp /path/to/uImage /media/boot/ (kernel image)
# cp /path/to/devicetree.dtb_zc702/zc706 /media/boot/devicetree.dtb (kernel device tree)

Additionally we need to copy the following binaries:

# cp /path/to/boot.bin_zc702/zc706 /media/boot/boot.bin (fsbl and u-boot bootloaders + FPGA stream)
# cp /path/to/uramdisk.image.gz /media/boot/ (contains a mini poky-debian + kernel modules)

Next, connect the USB-UART cable to the Host computer and open a serial terminal
with 115200 8n1 settings.

Set the Boot mode switches to 00110:
http://www.wiki.xilinx.com/file/view/wiki_7.1_boot_mode_switch.jpg/413984772/wiki_7.1_boot_mode_switch.jpg

Switch on the board. U-boot will be executed with the following load 
command:

sdboot=echo Copying Linux from SD to RAM... && mmcinfo && fatload mmc 0 0x3000000 ${kernel_image} && fatload mmc 0 0x2A00000 ${devicetree_image} && fatload mmc 0 0x2000000 ${ramdisk_image} && bootm 0x3000000 0x2000000 0x2A00000

Log in the filesystem:
user: root
pass: root

3) Re-build all of the images
   ==========================
   
a) Poky-Debian
   -------------

Build the root filesystem and kernel:

$ git clone git://github.com/ystk/poky-debian.git
$ cd poky-debian
$ cd ..
$ . poky-debian/setup.sh zynq/zc702
$ bitbake core-image-base

When it finishes you can find the following binaries:

$ cd build-zynq-zc702/tmp/deploy/images/
$ ls
core-image-base-zc702-20131203055016.rootfs.tar.gz (rootfs.tar.gz)
modules-3.10.19-xilinx-00025-g606f395-r0-zc702.tgz (modules.tgz)
uImage-git-r0-zc702-20131203055016.bin (uImage)
uImage-git-r0-zc702-20131203055016.dtb (devicetree.dtb_zc702)

Build a cross-compiler toolchain:

$ bitbake meta-toolchain

When it finishes you can find the following binaries:  
   
$ cd build-zynq-zc702/tmp/deploy/sdk/
$ ls 
debian-squeeze-eglibc-i686-arm-toolchain-1.0.tar.bz2
   
Note: to update the kernel to a different commit use GIT_COMMIT in:
meta-zc702/recipes-kernel/linux/linux_git.bbappend
   
b) Rebuild the kernel without poky-debian
   ---------------------------------------

This is optional if you want to compile your own kernel:
   
$ git clone git://github.com/ystk/linux-ltsi.git
$ git checkout -b zynq ltsi-3.10.y-zynq
$ make ARCH=arm CROSS_COMPILE=arm-debian-squeeze-linux-gnueabi- mrproper
$ make ARCH=arm CROSS_COMPILE=arm-debian-squeeze-linux-gnueabi- xilinx_zynq_defconfig
$ make ARCH=arm CROSS_COMPILE=arm-debian-squeeze-linux-gnueabi- menuconfig (modify if you want)
$ make ARCH=arm CROSS_COMPILE=arm-debian-squeeze-linux-gnueabi- UIMAGE_LOADADDR=0x8000 uImage
$ make ARCH=arm CROSS_COMPILE=arm-debian-squeeze-linux-gnueabi- UIMAGE_LOADADDR=0x8000 modules
$ make ARCH=arm CROSS_COMPILE=arm-debian-squeeze-linux-gnueabi- UIMAGE_LOADADDR=0x8000 dtbs
 
This will generate:
- arch/arm/boot/uImage 
- ***.ko modules (unless you disable modules in menuconfig)
- arch/arm/boot/dts/zync-zc702.dtb (devicetree.dtb_zc702)
- arch/arm/boot/dts/zync-zc706.dtb (devicetree.dtb_zc7062)
   
c) uramdisk.image.gz 
   -----------------
   
First, create a simple core-image-base using poky-debian. It could be 
the same as the rootfs but without the custom applications. Then we 
prepare the image as a loop device:
   
$ dd if=/dev/zero of=ramdisk.image bs=1024 count=8192
$ mke2fs -F ramdisk.image -L "ramdisk" -b 1024 -m 0
$ tune2fs ramdisk.image -i 0
$ chmod a+rwx ramdisk.image
$ mkdir tmp
$ sudo mount -o loop ramdisk.image tmp
$ cd tmp/
$ sudo tar zxvf ../core-image-base-zc702-20131115041625.rootfs.tar.gz
$ cd ..
$ sudo umount tmp
$ gzip ramdisk.image
$ mkimage -A arm -T ramdisk -C gzip -d ramdisk.image.gz uramdisk.image.gz

To reuse the existing uramdisk.image.gz do:

$ dd if=./uramdisk.image.gz of=./ramdisk.image.gz skip=16 bs=4
$ gunzip ramdisk.image.gz
$ sudo mount -o loop ramdisk.image tmp
... modify (e.g.: install modules here)
$ sudo umount tmp/

d) boot.bin
   --------

One option is using boot.bin included in Xilinx official zynq-14.7 release:

http://www.wiki.xilinx.com/Zynq+14.7-2013.3+Release
   
Generating boot.bin from scratch is a bit involved and requires using the 
Xilinx SDK (bootgen):

boot.bif:
image : {
        [bootloader]fsbl.elf
        u-boot.elf
}

bootgen -image boot.bif -o i boot.bin

fsbl.elf: http://www.wiki.xilinx.com/Build+FSBL
u-boot.elf: http://www.wiki.xilinx.com/Build+U-Boot

4) Simple functional tests
==========================

Ref: http://www.wiki.xilinx.com/Zc702+Linux

a) GPIO
   ----

# echo 10 > /sys/class/gpio/export
# echo out > /sys/class/gpio/gpio10/direction
# echo 1 > /sys/class/gpio/gpio10/value
# echo 0 > /sys/class/gpio/gpio10/value

b) Ethernet
   --------

# ping 144.121.121.121
64 bytes from 144.121.121.121: seq=0 ttl=64 time=1.309 ms

# wget http://www.wiki.xilinx.com/file/view/14.7-release.tar.xz
86206/14.7-release.tar.xz
14.7-release.tar.xz  100% |*******************************|  8237k 00:00:00 ETA
real    0m1.173s
user    0m0.040s
sys     0m0.430s

c) SD Card
   -------

# dd if=/dev/zero of=pepe.img bs=1024 count=50000
50000+0 records in
50000+0 records out
51200000 bytes (48.8MB) copied, 0.603653 seconds, 80.9MB/s

d) Real-time 
   ---------

# cyclictest -t 2 -p 98 -m -n -D 60 -i 1000 -q --smp
T: 0 (  606) P:98 I:1000 C:  59001 Min:      0 Act:   18 Avg:   16 Max:      73
T: 1 (  607) P:98 I:1500 C:  39327 Min:      0 Act:   14 Avg:   15 Max:      37

e) Suspend-Wakeup
   --------------
   
Ref: http://www.wiki.xilinx.com/Zynq+Power+Management

Set GPIO for waking up when pressing a push button:

# echo 14 > /sys/class/gpio/export
# echo both > /sys/class/gpio/gpio14/edge
# echo enabled > /sys/devices/amba.0/e000a000.ps7-gpio/power/wakeup

Suspend the board:

# echo mem > /sys/power/state

Press the push button marked as SW13. (or use gpio 12 and button SW14)

f) CPU frequency utils
   -------------------

Ref: http://www.wiki.xilinx.com/Zynq+Power+Management

# cpufreq-info
cpufrequtils 007: cpufreq-info (C) Dominik Brodowski 2004-2009
Report errors and bugs to cpufreq@vger.kernel.org, please.
analyzing CPU 0:
  driver: Zynq cpufreq
  CPUs which run at the same hardware frequency: 0 1
  CPUs which need to have their frequency coordinated by software: 0 1
  maximum transition latency: 300 us.
  hardware limits: 222 MHz - 667 MHz
  available frequency steps: 222 MHz, 333 MHz, 667 MHz
  available cpufreq governors: conservative, ondemand, powersave, userspace, performance
  current policy: frequency should be within 222 MHz and 667 MHz.
                  The governor "userspace" may decide which speed to use
                  within this range.
  current CPU frequency is 667 MHz (asserted by call to hardware).
  cpufreq stats: 222 MHz:nan%, 333 MHz:nan%, 667 MHz:nan%
analyzing CPU 1:
  driver: Zynq cpufreq
  CPUs which run at the same hardware frequency: 0 1
  CPUs which need to have their frequency coordinated by software: 0 1
  maximum transition latency: 300 us.
  hardware limits: 222 MHz - 667 MHz
  available frequency steps: 222 MHz, 333 MHz, 667 MHz
  available cpufreq governors: conservative, ondemand, powersave, userspace, performance
  current policy: frequency should be within 222 MHz and 667 MHz.
                  The governor "userspace" may decide which speed to use
                  within this range.
  current CPU frequency is 667 MHz (asserted by call to hardware).
  cpufreq stats: 222 MHz:nan%, 333 MHz:nan%, 667 MHz:nan%

# cpufreq-set -f 333 <--- **NOT WORKING?**
clk_set_rate: failed to set i2c0_aper rate

g) LTP tests
   ---------

# /usr/ltp/runltp -p -l result.yyyymmdd.log
or see memos/tests/ltp/README.txt

h) I2C
   ---
   
Ref: http://www.wiki.xilinx.com/Zc702+Linux

# hexdump /sys/bus/i2c/devices/3-0054/eeprom
0000000 1110 1312 1514 1716 1918 1b1a 1d1c 1f1e
0000010 ffff ffff ffff ffff ffff ffff ffff ffff
*
0000400

# cat /sys/bus/i2c/devices/5-0051/rtc/rtc0/date
rtc-pcf8563 5-0051: low voltage detected, date/time is not reliable.
2000-05-14

# cat /sys/bus/i2c/devices/5-0051/rtc/rtc0/time
rtc-pcf8563 5-0051: low voltage detected, date/time is not reliable.
10:01:50

# i2cdetect -l 
# i2cdetect -F 0

i) QSPI Flash
   ----------

Ref: http://www.wiki.xilinx.com/Zc702+Linux

# cat /proc/mtd
dev:    size   erasesize  name
mtd0: 00100000 00010000 "qspi-fsbl-uboot"
mtd1: 00500000 00010000 "qspi-linux"
mtd2: 00020000 00010000 "qspi-device-tree"
mtd3: 005e0000 00010000 "qspi-rootfs"
mtd4: 00400000 00010000 "qspi-bitstream

j) Watchdog
   --------
   
# watchdog -T 5 -t 30 -F /dev/watchdog0
xwdtps f8005000.ps7-wdt: Watchdog timed out.

5) Use LTSI kernel 
   ===============

Make sure you have a recent patch command:

$ wget http://ftp.gnu.org/gnu/patch/patch-2.7.tar.gz
$ tar zxvf patch-2.7.tar.gz
$ cd patch-2.7/
$ ./configure
$ make
$ make install

Get the LTSI patches:

cd ../
$ git clone http://git.linuxfoundation.org/ltsi-kernel.git
$ cat KERNEL_VERSION
3.10.16


Get the latest 3.10 kernel and create a branch for the LTSI patches version:

$ git clone git://github.com/ystk/linux-ltsi.git
$ cd linux-ltsi/
$ git checkout -b linux-3.10.y origin/linux-3.10.y
git checkout -b linux-3.10.26 8b4ed85b8404ffe7e10ee410c4df3968b86f0793

Apply the patches:

$ cd linux-ltsi/
$ export QUILT_PATCHES=/home/dsl/zynq/ltsi-kernel/
$ quilt push -a 

x) FAQ
   ===

Q) It works in zc702 but not in zc706
A) You need to use the following files:
   - zc70x/zc706/boot.bin (instead of zc70x/zc702/boot.bin)
   - zynq-zc706.dtb (instead of zync-zc702.dtb): you can generate it 
     manually (see above) or by changing variables KERNEL_DTS and 
     KERNEL_DTB at meta-zc702/conf.
