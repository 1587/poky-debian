diff -Naur crash-git.old/defs.h crash-git/defs.h
--- crash-git.old/defs.h	2014-09-11 11:01:03.000000000 +0000
+++ crash-git/defs.h	2014-09-11 11:08:15.000000000 +0000
@@ -1513,6 +1513,8 @@
 	long mm_rss_stat_count;
 	long module_module_init;
 	long module_init_text_size;
+	long timekeeper_xtime;
+	long timekeeper_xtime_sec;
 };
 
 struct size_table {         /* stash of commonly-used sizes */
@@ -3411,6 +3413,7 @@
 struct syment *per_cpu_symbol_search(char *);
 int symbol_exists(char *s);
 int kernel_symbol_exists(char *s);
+struct syment *kernel_symbol_search(char *);
 int get_syment_array(char *, struct syment **, int);
 void dump_struct(char *, ulong, unsigned);
 void dump_struct_member(char *, ulong, unsigned);
diff -Naur crash-git.old/kernel.c crash-git/kernel.c
--- crash-git.old/kernel.c	2014-09-11 11:01:03.000000000 +0000
+++ crash-git/kernel.c	2014-09-11 11:01:24.000000000 +0000
@@ -50,7 +50,7 @@
 static int BUG_x86(void);
 static int BUG_x86_64(void);
 static void cpu_maps_init(void);
-
+static void get_xtime(struct timespec *);
 
 /*
  *  Gather a few kernel basics.
@@ -163,7 +163,10 @@
 	    (sp2->value > sp1->value))
 		kt->flags |= SMP|PER_CPU_OFF;
 	
-	get_symbol_data("xtime", sizeof(struct timespec), &kt->date);
+	//get_symbol_data("xtime", sizeof(struct timespec), &kt->date);
+	MEMBER_OFFSET_INIT(timekeeper_xtime, "timekeeper", "xtime");
+	MEMBER_OFFSET_INIT(timekeeper_xtime_sec, "timekeeper", "xtime_sec");
+	get_xtime(&kt->date);
 	
 	if (pc->flags & GET_TIMESTAMP) {
         	fprintf(fp, "%s\n\n", 
@@ -3909,7 +3912,8 @@
 	fprintf(fp, "        CPUS: %d\n",
 		machine_type("PPC64") ? get_cpus_to_display() : kt->cpus);
 	if (ACTIVE())
-        	get_symbol_data("xtime", sizeof(struct timespec), &kt->date);
+		get_xtime(&kt->date);
+        //	get_symbol_data("xtime", sizeof(struct timespec), &kt->date);
         fprintf(fp, "        DATE: %s\n", 
 		strip_linefeeds(ctime(&kt->date.tv_sec))); 
         fprintf(fp, "      UPTIME: %s\n", get_uptime(buf, NULL)); 
@@ -4345,8 +4349,9 @@
 	fprintf(fp, "mods_installed: %d\n", kt->mods_installed);
 	fprintf(fp, "   module_tree: %s\n", kt->module_tree ? 
 		kt->module_tree : "(not used)");
-	if (!(pc->flags & KERNEL_DEBUG_QUERY) && ACTIVE()) 
-                get_symbol_data("xtime", sizeof(struct timespec), &kt->date);
+	if (!(pc->flags & KERNEL_DEBUG_QUERY) && ACTIVE())
+		get_xtime(&kt->date); 
+        //        get_symbol_data("xtime", sizeof(struct timespec), &kt->date);
         fprintf(fp, "          date: %s\n",
                 strip_linefeeds(ctime(&kt->date.tv_sec)));
         fprintf(fp, "  proc_version: %s\n", strip_linefeeds(kt->proc_version));
@@ -6875,3 +6880,27 @@
 		kt->flags |= ARCH_PVOPS;
 	}
 }
+
+/*
+ *  Get the kernel's xtime timespec from its relevant location.
+ */
+static void
+get_xtime(struct timespec *date)
+{
+        struct syment *sp;
+        uint64_t xtime_sec;
+
+        if (VALID_MEMBER(timekeeper_xtime) &&
+            (sp = kernel_symbol_search("timekeeper"))) {
+                readmem(sp->value + OFFSET(timekeeper_xtime), KVADDR,
+                        date, sizeof(struct timespec),
+                        "timekeeper xtime", RETURN_ON_ERROR);
+        } else if (VALID_MEMBER(timekeeper_xtime_sec) &&
+            (sp = kernel_symbol_search("timekeeper"))) {
+                readmem(sp->value + OFFSET(timekeeper_xtime_sec), KVADDR,
+                        &xtime_sec, sizeof(uint64_t),
+                        "timekeeper xtime_sec", RETURN_ON_ERROR);
+                date->tv_sec = (__time_t)xtime_sec;
+        } else if (kernel_symbol_exists("xtime"))
+                get_symbol_data("xtime", sizeof(struct timespec), date);
+}
diff -Naur crash-git.old/symbols.c crash-git/symbols.c
--- crash-git.old/symbols.c	2014-09-11 11:01:03.000000000 +0000
+++ crash-git/symbols.c	2014-09-11 11:10:27.000000000 +0000
@@ -4136,6 +4136,15 @@
 }
 
 /*
+ *  Similar to above, but return the syment of the kernel symbol.
+ */
+struct syment *
+kernel_symbol_search(char *symbol)
+{
+        return symname_hash_search(symbol);
+}
+
+/*
  *  Return the number of instances of a symbol name along with pointers to
  *  their syment structures.
  */
@@ -6348,6 +6357,11 @@
         fprintf(fp, "                 tms_tms_stime: %ld\n",
                 OFFSET(tms_tms_stime));
 
+	fprintf(fp, "              timekeeper_xtime: %ld\n",
+		OFFSET(timekeeper_xtime));
+	fprintf(fp, "          timekeeper_xtime_sec: %ld\n",
+		OFFSET(timekeeper_xtime_sec));
+
 	fprintf(fp, "                k_sigaction_sa: %ld\n",
         	OFFSET(k_sigaction_sa));
 
diff -Naur crash-git.old/x86_64.c crash-git/x86_64.c
--- crash-git.old/x86_64.c	2014-09-11 11:01:03.000000000 +0000
+++ crash-git/x86_64.c	2014-09-11 11:26:11.000000000 +0000
@@ -102,6 +102,7 @@
 static int x86_64_get_framesize(struct bt_info *, ulong, ulong);
 static void x86_64_framesize_debug(struct bt_info *);
 static void x86_64_get_active_set(void);
+static ulong search_for_switch_to(ulong, ulong);
 
 struct machine_specific x86_64_machine_specific = { 0 };
 
@@ -4912,47 +4913,31 @@
 static void
 x86_64_thread_return_init(void)
 {
-	int found;
 	struct syment *sp, *spn;
-	ulong max_instructions, address;
-	char buf[BUFSIZE];
+	ulong address;
 
-	if ((sp = symbol_search("thread_return"))) {
+	if ((sp = kernel_symbol_search("thread_return"))) {
 		machdep->machspec->thread_return = sp->value;
 		return;
 	}
 
-	if (!(sp = symbol_search("schedule")) ||
-	    !(spn = next_symbol(NULL, sp))) {
-		error(WARNING, "schedule: symbol does not exist\n");
+	if ((sp = kernel_symbol_search("schedule")) &&
+            (spn = next_symbol(NULL, sp)) &&
+            (address = search_for_switch_to(sp->value, spn->value))) {
+		machdep->machspec->thread_return = address;
 		return;
 	}
-	max_instructions = spn->value - sp->value;
-	found = FALSE;
 
-	open_tmpfile();
-
-        sprintf(buf, "x/%ldi 0x%lx",
-		max_instructions, sp->value);
-
-        if (!gdb_pass_through(buf, pc->tmpfile, GNU_RETURN_ON_ERROR))
+	if ((sp = kernel_symbol_search("__schedule")) &&
+            (spn = next_symbol(NULL, sp)) &&
+            (address = search_for_switch_to(sp->value, spn->value))) {
+		machdep->machspec->thread_return = address;
 		return;
-
-	rewind(pc->tmpfile);
-        while (fgets(buf, BUFSIZE, pc->tmpfile)) {
-		if (found)
-			break;
-		if (strstr(buf, "__switch_to"))
-			found = TRUE;
 	}
-	close_tmpfile();
 
-	if (found && extract_hex(buf, &address, NULLCHAR, TRUE))
-		machdep->machspec->thread_return = address;
-	else {
-		machdep->machspec->thread_return = symbol_value("schedule");
-		error(INFO, "cannot determing thread return address\n");
-	}
+	error(INFO, "cannot determine thread return address\n");
+	machdep->machspec->thread_return =
+		(sp = kernel_symbol_search("schedule")) ?  sp->value : 0;
 }
 
 static void 
@@ -6815,4 +6800,42 @@
 	}
 }
 
+static ulong
+search_for_switch_to(ulong start, ulong end)
+{
+	ulong max_instructions, address;
+	char buf1[BUFSIZE];
+	char buf2[BUFSIZE];
+	int found;
+
+	max_instructions = end - start;
+	found = FALSE;
+	sprintf(buf1, "x/%ldi 0x%lx", max_instructions, start);
+	if (symbol_exists("__switch_to"))
+		sprintf(buf2, "callq  0x%lx", symbol_value("__switch_to"));
+	else
+		buf2[0] = NULLCHAR;
+
+	open_tmpfile();
+
+	if (!gdb_pass_through(buf1, pc->tmpfile, GNU_RETURN_ON_ERROR))
+		return FALSE;
+
+	rewind(pc->tmpfile);
+	while (fgets(buf1, BUFSIZE, pc->tmpfile)) {
+		if (found)
+			break;
+		if (strstr(buf1, "<__switch_to>"))
+			found = TRUE;
+		if (strlen(buf2) && strstr(buf1, buf2))
+			found = TRUE;
+	}
+	close_tmpfile();
+
+	if (found && extract_hex(buf1, &address, ':', TRUE))
+		return address;
+
+	return 0;
+}
+
 #endif  /* X86_64 */ 
