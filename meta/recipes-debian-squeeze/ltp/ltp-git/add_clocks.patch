diff -Naur a/configure.ac b/configure.ac
--- a/configure.ac	2012-02-09 16:48:24.000000000 +0900
+++ b/configure.ac	2012-02-09 16:49:07.000000000 +0900
@@ -72,5 +72,6 @@
 LTP_CHECK_SYSCALL_SIGNALFD
 LTP_CHECK_SYSCALL_UNSHARE
 LTP_CHECK_TASKSTATS
+LTP_CHECK_TIME
 
 AC_OUTPUT
diff -Naur a/m4/ltp-time.m4 b/m4/ltp-time.m4
--- a/m4/ltp-time.m4	1970-01-01 09:00:00.000000000 +0900
+++ b/m4/ltp-time.m4	2012-02-09 16:49:09.000000000 +0900
@@ -0,0 +1,35 @@
+dnl
+dnl Copyright (c) Copyrights-are-for-losers, Inc 2010
+dnl
+dnl This program is free software;  you can redistribute it and/or modify
+dnl it under the terms of the GNU General Public License as published by
+dnl the Free Software Foundation; either version 2 of the License, or
+dnl (at your option) any later version.
+dnl
+dnl This program is distributed in the hope that it will be useful,
+dnl but WITHOUT ANY WARRANTY;  without even the implied warranty of
+dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
+dnl the GNU General Public License for more details.
+dnl
+dnl You should have received a copy of the GNU General Public License
+dnl along with this program;  if not, write to the Free Software
+dnl Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+dnl
+dnl Author: Garrett Cooper <yanegomi@gmail.com>
+dnl
+
+dnl
+dnl LTP_CHECK_TIME
+dnl
+dnl For all directly related time syscalls.
+dnl
+dnl ----------------------------
+dnl
+AC_DEFUN([LTP_CHECK_TIME],[
+	AC_CHECK_DECLS([CLOCK_MONOTONIC_RAW, CLOCK_REALTIME_COARSE, CLOCK_MONOTONIC_COARSE],,,[
+#ifndef _GNU_SOURCE
+#define _GNU_SOURCE
+#endif
+#include <time.h>
+])
+])
diff -Naur a/testcases/kernel/timers/include/common_timers.h b/testcases/kernel/timers/include/common_timers.h
--- a/testcases/kernel/timers/include/common_timers.h	2012-02-09 16:48:17.000000000 +0900
+++ b/testcases/kernel/timers/include/common_timers.h	2012-02-09 16:49:16.000000000 +0900
@@ -8,48 +8,52 @@
 #define __COMMON_TIMERS_H__
 
 #define CLEANUP cleanup
+#include "config.h"
 #include "linux_syscall_numbers.h"
 
 #ifndef NSEC_PER_SEC
 #define NSEC_PER_SEC (1000000000L)
 #endif
-#ifndef CLOCK_REALTIME
-#define CLOCK_REALTIME 0
-#endif
-#ifndef CLOCK_MONOTONIC
-#define CLOCK_MONOTONIC 1
-#endif
-#ifndef CLOCK_PROCESS_CPUTIME_ID
-#define CLOCK_PROCESS_CPUTIME_ID 2
-#endif
-#ifndef CLOCK_THREAD_CPUTIME_ID
-#define CLOCK_THREAD_CPUTIME_ID 3
-#endif
-#ifndef CLOCK_MONOTONIC_RAW
-#define CLOCK_MONOTONIC_RAW 4
-#endif
 clock_t clock_list[] = {
 	CLOCK_REALTIME,
 	CLOCK_MONOTONIC,
 	CLOCK_PROCESS_CPUTIME_ID,
 	CLOCK_THREAD_CPUTIME_ID,
+#if HAVE_CLOCK_MONOTONIC_RAW
 	CLOCK_MONOTONIC_RAW,
+#endif
+#if HAVE_CLOCK_REALTIME_COARSE
+	CLOCK_REALTIME_COARSE,
+#endif
+#if HAVE_CLOCK_MONOTONIC_COARSE
+	CLOCK_MONOTONIC_COARSE,
+#endif
 };
-#define MAX_CLOCKS (sizeof(clock_list) / sizeof(*clock_list))
+/* CLOCKS_DEFINED is the number of clock sources defined for sure */ 
+#define CLOCKS_DEFINED (sizeof(clock_list) / sizeof(*clock_list)) 
+/* MAX_CLOCKS is the maximum number of clock sources supported by kernel */ 
+#define MAX_CLOCKS 16 
+
+#define CLOCK_TO_STR(def_name)	\
+	case def_name:		\
+		return #def_name;
 
 const char *get_clock_str(const int clock_id)
 {
 	switch(clock_id) {
-	case CLOCK_REALTIME:
-		return "CLOCK_REALTIME";
-	case CLOCK_MONOTONIC:
-		return "CLOCK_MONOTONIC";
-	case CLOCK_PROCESS_CPUTIME_ID:
-		return "CLOCK_PROCESS_CPUTIME_ID";
-	case CLOCK_THREAD_CPUTIME_ID:
-		return "CLOCK_THREAD_CPUTIME_ID";
-	case CLOCK_MONOTONIC_RAW:
-		return "CLOCK_MONOTONIC_RAW";
+	CLOCK_TO_STR(CLOCK_REALTIME);
+	CLOCK_TO_STR(CLOCK_MONOTONIC);
+	CLOCK_TO_STR(CLOCK_PROCESS_CPUTIME_ID);
+	CLOCK_TO_STR(CLOCK_THREAD_CPUTIME_ID);
+#if HAVE_CLOCK_MONOTONIC_RAW
+	CLOCK_TO_STR(CLOCK_MONOTONIC_RAW);
+#endif
+#if HAVE_CLOCK_REALTIME_COARSE
+	CLOCK_TO_STR(CLOCK_REALTIME_COARSE);
+#endif
+#if HAVE_CLOCK_MONOTONIC_COARSE
+	CLOCK_TO_STR(CLOCK_MONOTONIC_COARSE);
+#endif
 	default:
 		return "CLOCK_!?!?!?";
 	}
diff -Naur a/testcases/kernel/timers/timer_create/timer_create02.c b/testcases/kernel/timers/timer_create/timer_create02.c
--- a/testcases/kernel/timers/timer_create/timer_create02.c	2012-02-09 16:48:17.000000000 +0900
+++ b/testcases/kernel/timers/timer_create/timer_create02.c	2012-02-09 16:49:16.000000000 +0900
@@ -113,7 +113,7 @@
 
 			setup_test(i);
 
-			for (j = 0; j < MAX_CLOCKS; ++j) {
+			for (j = 0; j < CLOCKS_DEFINED; ++j) {
 
 				if (strstr(get_clock_str(clock_list[j]),
 						"CPUTIME_ID")) {
