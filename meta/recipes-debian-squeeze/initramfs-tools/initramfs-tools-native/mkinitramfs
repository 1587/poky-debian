#!/bin/sh
#
# native mkinitramfs
#
# this script is based on mkinitramfs in initramfs-tools source package
# and modified to be used in poky native environment
#

info() {
	echo "mkinitramfs: $@"
}

# "DATADIR" is set automatically by build script
DATADIR=
if [ -z "$DATADIR" ]; then
	info "ERROR: DATADIR for mkinitramfs is empty."
	exit 1
fi

#
# module related functions (Copied from "hook-functions")
#

manual_add_modules()
{
	local kmod firmware

	for kmod in $(modprobe --set-version="${version}" --ignore-install \
	--quiet --show-depends -d "${rootdir}" "${1}" | awk '/^insmod/ { print $2 }'); do
		kmodshort=`echo "${kmod}" | sed "s|.*/\(lib/modules/.*\)|\1|"`

		# Prune duplicates
		if [ -e "${DESTDIR}/${kmodshort}" ]; then
			continue
		fi

		mkdir -p "${DESTDIR}/$(dirname ${kmodshort})"
		cp "${kmod}" "${DESTDIR}/$(dirname ${kmodshort})"
		echo "Copying module ${kmod} to ${DESTDIR}/$(dirname ${kmodshort})"
	done
}

# Copy entire subtrees to the initramfs
copy_modules_dir()
{
	local kmod exclude
	local dir="$1"
	shift

	if ! [ -d "${MODDIR_SRC}/${dir}" ]; then
		return;
	fi
	while [ $# -ge 1 ]; do
		exclude="${exclude:-} -name $1 -prune -o "
		shift
	done
	for kmod in $(find "${MODDIR_SRC}/${dir}" ${exclude:-} -name '*.ko' -print); do
		manual_add_modules $(basename ${kmod} .ko)
	done
}

# The modules "most" classes added per default to the initramfs
auto_add_modules()
{
	case "${1:-}" in
	base)
		for x in ehci-hcd ohci-hcd uhci-hcd usbhid xhci hid-apple \
		hid-cherry hid-logitech hid-microsoft \
		btrfs ext2 ext3 ext4 ext4dev isofs jfs nfs reiserfs udf xfs \
		af_packet atkbd i8042 virtio_pci; do
			manual_add_modules "${x}"
		done
	;;
	net)
		copy_modules_dir kernel/drivers/net \
			appletalk arcnet bonding can hamradio irda pcmcia \
			tokenring usb wan wimax wireless
	;;
	ide)
		copy_modules_dir kernel/drivers/ide
	;;
	mmc)
		copy_modules_dir kernel/drivers/mmc
	;;
	scsi)
		copy_modules_dir kernel/drivers/scsi
		for x in mptfc mptsas mptscsih mptspi zfcp; do
			manual_add_modules "${x}"
		done
	;;
	ata)
		copy_modules_dir kernel/drivers/ata
	;;
	block)
		copy_modules_dir kernel/drivers/block
	;;
	ubi)
		for x in deflate zlib lzo ubi ubifs; do
			manual_add_modules "${x}"
		done
	;;
	ieee1394)
		for x in ohci1394 sbp2; do
			manual_add_modules "${x}"
		done
	;;
	firewire)
		for x in firewire-ohci  firewire-sbp2; do
			manual_add_modules "${x}"
		done
	;;
	i2o)
		for x in i2o_block; do
			manual_add_modules "${x}"
		done
	;;
	dasd)
		for x in dasd_diag_mod dasd_eckd_mod dasd_fba_mod; do
			manual_add_modules "${x}"
		done
	;;
	usb_storage)
		copy_modules_dir kernel/drivers/usb/storage
	;;
	*)
		auto_add_modules base
		auto_add_modules net
		auto_add_modules ide
		auto_add_modules scsi
		auto_add_modules block
		auto_add_modules ata
		auto_add_modules i2o
		auto_add_modules dasd
		auto_add_modules ieee1394
		auto_add_modules firewire
		auto_add_modules mmc
		auto_add_modules usb_storage
	;;
	esac
}

# 'depmod' only looks at symbol dependencies; there is no way for
# modules to declare explicit dependencies through module information,
# so dependencies on e.g. crypto providers are hidden.  Until this is
# fixed, we need to handle those hidden dependencies.
hidden_dep_add_modules()
{
	for dep in "lib/libcrc32c crc32c"; do
		set -- $dep
		if [ -f "${DESTDIR}/lib/modules/${version}/kernel/$1.ko" ]; then
			manual_add_modules "$2"
		fi
	done
}

# mkinitramfs help message
usage()
{
	cat >&2 << EOF

Usage: ${0} -o outfile -R rootdir -V version -D destdir

Options:
  -o outfile	Write to outfile.
  -R rootdir	Root directory including kernel modules.
  -V version	Kernel version.
  -D destdir	Destination directory.

See mkinitramfs(8) for further details.
EOF
	exit 1

}

#
# main script
#

umask 0022
export PATH='/usr/bin:/sbin:/bin'

OPTIONS=`getopt -o o:R:V:D: -n "$0" -- "$@"`

# Check for non-GNU getopt
if [ $? != 0 ] ; then echo "W: non-GNU getopt" >&2 ; exit 1 ; fi

eval set -- "$OPTIONS"

while true; do
	case "$1" in
	-o)
		outfile="$2"
		shift 2
		;;
	-R)
		rootdir="$2"
		shift 2
		;;
	-V)
		version="$2"
		shift 2
		;;
	-D)
		DESTDIR="$2"
		shift 2
		;;
	--)
		shift
		break
		;;
	*)
		echo "Internal error!" >&2
		exit 1
		;;
	esac
done

if [ -z "${outfile}" ]; then
	usage
fi

touch "$outfile"
outfile="$(readlink -f "$outfile")"

if [ -d "${outfile}" ]; then
	echo "${outfile} is a directory" >&2
	exit 1
fi

MODDIR="lib/modules/${version}"
MODDIR_SRC="${rootdir}/${MODDIR}"

if [ ! -e "${MODDIR_SRC}" ]; then
	echo "WARNING: missing ${MODDIR_SRC}"
	echo "Device driver support needs thus be built-in linux image!"
fi
if [ ! -e "${MODDIR_SRC}/modules.dep" ]; then
	echo "ERROR: missing ${MODDIR_SRC}/modules.dep"
	exit 1
fi

for d in conf scripts ${MODDIR} bin; do
	mkdir -p "${DESTDIR}/${d}"
done

# Copy the modules.order file in
if [ -f "${MODDIR_SRC}/modules.order" ]; then
	cp -p "${MODDIR_SRC}/modules.order" \
		"${DESTDIR}${MODDIR}/modules.order"
fi

# MODULES=most is default
auto_add_modules

# Resolve hidden dependencies
hidden_dep_add_modules

# Have to do each file, because cpio --dereference doesn't recurse down
# symlinks.

cp -p ${DATADIR}/init ${DESTDIR}/init

# add existant boot scripts
for b in $(cd ${DATADIR}/scripts && find . \
	-regextype posix-extended -regex '.*/[[:alnum:]\._-]+$' -type f); do
	[ -d "${DESTDIR}/scripts/$(dirname "${b}")" ] \
		|| mkdir -p "${DESTDIR}/scripts/$(dirname "${b}")"
	cp -p "${DATADIR}/scripts/${b}" \
		"${DESTDIR}/scripts/$(dirname "${b}")/"
done

cp -p ${DATADIR}/conf/initramfs.conf ${DESTDIR}/conf

# generate module deps
depmod -a -b "${DESTDIR}" ${version}
rm -f "${DESTDIR}/lib/modules/${version}"/modules.*map

# Remove any looping or broken symbolic links, since they break cpio.
[ "${verbose}" = y ] && xargs_verbose="-t"
(cd "${DESTDIR}" && find . -type l -printf '%p %Y\n' | sed -n 's/ [LN]$//p' \
	| xargs ${xargs_verbose:-} -rL1 rm -f)

compress=gzip
[ "${verbose}" = y ] && echo "Building cpio ${outfile} initramfs"
(
# work around lack of "set -o pipefail" for the following pipe:
# cd "${DESTDIR}" && find . | cpio --quiet --dereference -o -H newc | gzip >"${outfile}" || exit 1
exec 3>&1
eval `
	# http://cfaj.freeshell.org/shell/cus-faq-2.html
	exec 4>&1 >&3 3>&-
	cd  "${DESTDIR}"
	{
		find . 4>&-; echo "ec1=$?;" >&4
	} | {
		cpio --quiet -o -H newc 4>&-; echo "ec2=$?;" >&4
	} | ${compress} >"${outfile}"
	echo "ec3=$?;" >&4
`
if [ "$ec1" -ne 0 ]; then
	echo "E: mkinitramfs failure find $ec1 cpio $ec2 $compress $ec3"
	exit "$ec1"
fi
if [ "$ec2" -ne 0 ]; then
	echo "E: mkinitramfs failure cpio $ec2 $compress $ec3"
	exit "$ec2"
fi
if [ "$ec3" -ne 0 ]; then
	echo "E: mkinitramfs failure $compress $ec3"
	exit "$ec3"
fi
) || exit 1

exit 0
